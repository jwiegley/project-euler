module Euler012 where

import Euler003

import Data.List
import Data.Foldable hiding (foldl')

-- | Problem 12
--
-- The sequence of triangle numbers is generated by adding the natural
-- numbers. So the 7^th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 =
-- 28. The first ten terms would be:
--
--                  1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
--
-- Let us list the factors of the first seven triangle numbers:
--
--    1: 1
--    3: 1,3
--    6: 1,2,3,6
--   10: 1,2,5,10
--   15: 1,3,5,15
--   21: 1,3,7,21
--   28: 1,2,4,7,14,28
--
-- We can see that 28 is the first triangle number to have over five
-- divisors.
--
-- What is the value of the first triangle number to have over five hundred
-- divisors?
--
-- >>> euler012 5
-- 28
-- >>> euler012 500
-- 76576500

triangleNums :: [Integer]
triangleNums = tail $ scanl (+) 0 [1..]

-- To compute factors, we only need to consider 2..sqrt n, and then we can
-- divide by the factors so found to discover any factors greater than sqrt n.

factors :: Integer -> [Integer]
factors n = nub $ 1 : n : (foldMap (\x -> [x, n `div` x]) $
                           filter (n `divisibleBy`) [2..isqrt n])

euler012 :: Int -> Integer
euler012 n = head $ filter ((> n) . length . factors) triangleNums
